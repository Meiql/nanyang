package org.springrain.erp.hr.service.impl;

import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;
import org.springrain.erp.constants.ErpStateEnum;
import org.springrain.erp.gz.util.GlobalStaticVar;
import org.springrain.erp.hr.entity.UserCertificate;
import org.springrain.erp.hr.entity.UserEducational;
import org.springrain.erp.hr.entity.UserInfo;
import org.springrain.erp.hr.service.IUserCertificateService;
import org.springrain.erp.hr.service.IUserEducationalService;
import org.springrain.erp.hr.service.IUserInfoService;
import org.springrain.frame.common.SessionUser;
import org.springrain.frame.entity.IBaseEntity;
import org.springrain.frame.util.DateUtils;
import org.springrain.frame.util.Finder;
import org.springrain.frame.util.Page;
import org.springrain.frame.util.ReturnDatas;
import org.springrain.frame.util.property.MessageUtils;
import org.springrain.system.entity.User;
import org.springrain.system.service.BaseSpringrainServiceImpl;


/**
 * TODO 在此加入类描述
 * @copyright {@link weicms.net}
 * @author springrain<Auto generate>
 * @version  2017-07-03 17:47:25
 * @see org.springrain.erp.hr.service.impl.UserInfo
 */
@Service("userInfoService")
public class UserInfoServiceImpl extends BaseSpringrainServiceImpl implements IUserInfoService {

	@Resource
	private IUserEducationalService userEducationalService;
	@Resource
	private IUserCertificateService userCertificateService;
   
    @Override
	public String  save(Object entity ) throws Exception{
	      UserInfo userInfo=(UserInfo) entity;
	       return super.save(userInfo).toString();
	}

    @Override
	public String  saveorupdate(Object entity ) throws Exception{
	      UserInfo userInfo=(UserInfo) entity;
		 return super.saveorupdate(userInfo).toString();
	}
	
	@Override
    public Integer update(IBaseEntity entity ) throws Exception{
	 UserInfo userInfo=(UserInfo) entity;
	return super.update(userInfo);
    }
    @Override
	public UserInfo findUserInfoById(Object id) throws Exception{
	 return super.findById(id,UserInfo.class);
	}
	
/**
 * 列表查询,每个service都会重载,要把sql语句封装到service中,Finder只是最后的方案
 * @param finder
 * @param page
 * @param clazz
 * @param o
 * @return
 * @throws Exception
 */
        @Override
    public <T> List<T> findListDataByFinder(Finder finder, Page page, Class<T> clazz,
			Object o) throws Exception{
			 return super.findListDataByFinder(finder,page,clazz,o);
			}
	/**
	 * 根据查询列表的宏,导出Excel
	 * @param finder 为空则只查询 clazz表
	 * @param ftlurl 类表的模版宏
	 * @param page 分页对象
	 * @param clazz 要查询的对象
	 * @param o  querybean
	 * @return
	 * @throws Exception
	 */
		@Override
	public <T> File findDataExportExcel(Finder finder,String ftlurl, Page page,
			Class<T> clazz, Object o)
			throws Exception {
			 return super.findDataExportExcel(finder,ftlurl,page,clazz,o);
		}
		/**
		 * 查找用户的详细信息
		 */	
	@Override
	public UserInfo finderUserInfo(UserInfo userInfo)
			throws Exception {
		if(StringUtils.isEmpty(userInfo.getUserId())){
			return null;
		}
		Finder f = new Finder();
		f.append("select * from "+Finder.getTableName(UserInfo.class)+"");
		f.append(" where userId = :userId").setParam("userId", userInfo.getUserId());
		return super.queryForObject(userInfo);
	}

	@Override
	public List<UserInfo> findUserInfoByQuery(UserInfo query, Page page)
			throws Exception {
		Finder finder = Finder.getSelectFinder(User.class,"u.name userName,u.id uid,u.account account,ui.*");
		finder.append(" as u LEFT JOIN ").append(Finder.getTableName(UserInfo.class)).append(" as ui ON u.id = ui.userId ");
		finder.append(" where 1 = 1 and u.active = :active and u.userType = :utype ")
			  .setParam("active", ErpStateEnum.userActiveEnum.在职.getValue()).setParam("utype", ErpStateEnum.userTypeEnum.员工.getValue());
		
		if(StringUtils.isNotBlank(query.getUserName())){
			finder.append(" and u.name like :uname ").setParam("uname", "%"+query.getUserName()+"%");
		}
		if(StringUtils.isNotBlank(query.getWorkno())){
			finder.append(" and ui.workno like :workno ").setParam("workno", "%"+query.getWorkno()+"%");
		}
		if(StringUtils.isNotBlank(query.getBankAccountName())){
			finder.append(" and ui.bankAccountName like :bankAccountName ").setParam("bankAccountName", "%"+query.getBankAccountName()+"%");
		}
		if(StringUtils.isNotBlank(query.getBankId())){
			finder.append(" and ui.bankId like :bankId ").setParam("bankId", "%"+query.getBankId()+"%");
		}
		if(StringUtils.isNotBlank(query.getCompany())){
			finder.append(" and ui.company = :company ").setParam("company", query.getCompany());
		}
		if(StringUtils.isNotBlank(query.getTongchou())){
			finder.append(" and ui.tongchou = :tongchou ").setParam("tongchou", query.getTongchou());
		}
		if(StringUtils.isNotBlank(query.getGangwei())){
			finder.append(" and ui.gangwei = :gangwei ").setParam("gangwei", query.getGangwei());
		}
		if(StringUtils.isNotBlank(query.getEntryCity())){
			finder.append(" and ui.entryCity = :enytyCity ").setParam("enytyCity", query.getEntryCity());
		}
		if(StringUtils.isNotBlank(query.getBankName())){
			finder.append(" and ui.bankName = :bankName ").setParam("bankName", query.getBankName());
		}
		if(StringUtils.isNotBlank(query.getBankState())){
			finder.append(" and ui.bankState = :bankState ").setParam("bankState", query.getBankState());
		}
		if(StringUtils.isNotBlank(query.getStoppay())){
			finder.append(" and ui.stoppay = :stoppay ").setParam("stoppay", query.getStoppay());
		}
		
		return super.queryForList(finder, UserInfo.class, page);
	}

	@Override
	public UserInfo findUserInfoByUserId(String userId) throws Exception {
		Finder finder = Finder.getSelectFinder(User.class,"u.name userName,u.id uid,u.account account,ui.*");
		finder.append(" as u LEFT JOIN ").append(Finder.getTableName(UserInfo.class)).append(" as ui ON u.id = ui.userId ");
		finder.append(" where 1 = 1 and u.id = :id ").setParam("id", userId);
		return super.queryForObject(finder, UserInfo.class);
	}

	@Override
	public ReturnDatas saveOrUpdate(UserInfo userInfo) throws Exception {
		ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
		try {
			java.lang.String id =userInfo.getId();
			userInfo.setEditPerson(SessionUser.getUserId());
			userInfo.setEditDate(new Date());
			if(StringUtils.isNotBlank(userInfo.getIdCard())){
				String message = GlobalStaticVar.checkIDCard(userInfo.getIdCard());
				if(StringUtils.isNotBlank(message)){
					return new ReturnDatas(ReturnDatas.ERROR,message);
				}
				if(userInfo.getBirthday() == null){
					String birthday = null;
					if(userInfo.getIdCard().length() == 18){
						birthday = userInfo.getIdCard().substring(6,14);
					}
					Date birthDay = DateUtils.convertString2Date("yyyyMMdd",birthday);
					userInfo.setBirthday(birthDay);
				}
			}
			if(StringUtils.isBlank(id)){
				userInfo.setId(userInfo.getUserId());
				super.save(userInfo);
			}else{
				super.update(userInfo, true);
			}
			if(StringUtils.isNotBlank(userInfo.getFlag())){
				if(CollectionUtils.isNotEmpty(userInfo.getEducational())){
					List<String> educationalIds = new ArrayList<String>();
					for(UserEducational ue : userInfo.getEducational()){
						if(StringUtils.isNotBlank(ue.getId())){
							educationalIds.add(ue.getId());
						}
					}
					userEducationalService.deleteNotInIdsAndUserId(userInfo.getUserId(), educationalIds);
					int i = 0;
					for(UserEducational ue : userInfo.getEducational()){
						if(StringUtils.isBlank(ue.getId())){
							ue.setId(null);
						}
						if(StringUtils.isBlank(ue.getUserId())){
							ue.setUserId(userInfo.getUserId());
						}
						ue.setSort(i);
						i++;
						userEducationalService.saveorupdate(ue);
					}
				}
				List<String> certificatelIds = new ArrayList<String>();
				if(CollectionUtils.isNotEmpty(userInfo.getCertificate())){
					for(UserCertificate ce : userInfo.getCertificate()){
						if(StringUtils.isNotBlank(ce.getId())){
							certificatelIds.add(ce.getId());
						}
					}
				}
				userCertificateService.deleteNotInIdsAndUserId(userInfo.getUserId(), certificatelIds);
				if(CollectionUtils.isNotEmpty(userInfo.getCertificate())){
					for(UserCertificate ce : userInfo.getCertificate()){
						if(StringUtils.isBlank(ce.getId())){
							ce.setId(null);
						}
						if(StringUtils.isBlank(ce.getUserId())){
							ce.setUserId(userInfo.getUserId());
						}
						userCertificateService.saveorupdate(ce);
					}
				}
			}
		} catch (Exception e) {
			logger.error(e.getMessage(),e);
			returnObject.setStatus(ReturnDatas.ERROR);
			returnObject.setMessage(MessageUtils.UPDATE_ERROR);
		}
		return returnObject;
	}

	
}
