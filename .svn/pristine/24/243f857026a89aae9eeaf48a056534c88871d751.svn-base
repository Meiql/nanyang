package org.springrain.erp.gz.web;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Set;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springrain.erp.gz.entity.Formula;
import org.springrain.erp.gz.service.IFormulaService;
import org.springrain.frame.controller.BaseController;
import org.springrain.frame.util.GlobalStatic;
import org.springrain.frame.util.Page;
import org.springrain.frame.util.ReturnDatas;
import org.springrain.frame.util.SecUtils;
import org.springrain.frame.util.property.MessageUtils;

/**
 * 公示管理
 * 
 * @copyright {@link weicms.net}
 * @author springrain<Auto generate>
 * @version 2017-07-03 17:29:07
 * @see org.springrain.erp.gz.web.Formula
 */
@Controller
@RequestMapping(value = "/formula")
public class FormulaController extends BaseController {
	@Resource
	private IFormulaService formulaService;

	private String listurl = "/erp/gz/formula/formulaList";

	/**
	 * 列表数据,调用listjson方法,保证和app端数据统一
	 * 
	 * @param request
	 * @param model
	 * @param formula
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/list")
	public String list(HttpServletRequest request, Model model, Formula formula)
			throws Exception {
		ReturnDatas returnObject = listjson(request, model, formula);
		model.addAttribute(GlobalStatic.returnDatas, returnObject);
		return listurl;
	}

	/**
	 * json数据,为APP提供数据
	 * 
	 * @param request
	 * @param model
	 * @param formula
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/list/json")
	@ResponseBody
	public ReturnDatas listjson(HttpServletRequest request, Model model,
			Formula formula) throws Exception {
		ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
		// ==构造分页请求
		Page page = newPage(request);
		// ==执行分页查询
		List<Formula> datas = formulaService.findListDataByFinder(null, page,
				Formula.class, formula);
		returnObject.setQueryBean(formula);
		returnObject.setPage(page);
		returnObject.setData(datas);
		return returnObject;
	}

	@RequestMapping("/list/export")
	public void listexport(HttpServletRequest request,
			HttpServletResponse response, Model model, Formula formula)
			throws Exception {
		// ==构造分页请求
		Page page = newPage(request);

		File file = formulaService.findDataExportExcel(null, listurl, page,
				Formula.class, formula);
		String fileName = "formula" + GlobalStatic.excelext;
		downFile(response, file, fileName, true);
		return;
	}

	/**
	 * 查看操作,调用APP端lookjson方法
	 */
	@RequestMapping(value = "/look")
	public String look(Model model, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		ReturnDatas returnObject = lookjson(model, request, response);
		model.addAttribute(GlobalStatic.returnDatas, returnObject);
		return "/erp/gz/formula/formulaLook";
	}

	/**
	 * 查看的Json格式数据,为APP端提供数据
	 */
	@RequestMapping(value = "/look/json")
	@ResponseBody
	public ReturnDatas lookjson(Model model, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
		java.lang.String id = request.getParameter("id");
		if (StringUtils.isNotBlank(id)) {
			Formula formula = formulaService.findFormulaById(id);
			returnObject.setData(formula);
		} else {
			returnObject.setStatus(ReturnDatas.ERROR);
		}
		return returnObject;

	}

	/**
	 * 新增/修改save操作
	 * 
	 * @param model
	 * @param formula
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 * @author Mr.Hao<Auto generate>
	 * @version 2013-05-23 11:12:17
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/update")
	public String saveorupdate(Model model, Formula formula,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		if (formula == null) {
			model.addAttribute(message, "公式不能为空！");
			return messageurl;
		}
		if (StringUtils.isBlank(formula.getProjectName())) {
			model.addAttribute(message, "公式的项目名称不能为空！");
			return messageurl;
		}
		if (StringUtils.isNotBlank(formula.getChineseExpression())) {
			// 查询该项目所有的公式项和非公式项
			List<String> listall = formulaService
					.findFormulaNameByProjectName(formula.getProjectName());
			Set<String> setf = formulaService.findFormulaSetName(formula
					.getChineseExpression());
			if (CollectionUtils.isNotEmpty(setf)) {
				List<String> listf = new ArrayList<String>();
				for (String str : setf) {
					listf.add(str);
				}
				// listf中存在 但listAll中没有的
				Collection<String> listaa = CollectionUtils.subtract(listf,
						listall);
				if (CollectionUtils.isNotEmpty(listaa)) {
					String bucunzai = ArrayUtils.toString(listaa.toArray());
					model.addAttribute(message, "提交失败：公式中的非法项" + bucunzai); 
					return messageurl;
				}
			}
		}

		if (StringUtils.isBlank(formula.getId())) {// 新增
			formula.setId(SecUtils.getUUID());
			try {
				formulaService.saveFormula(formula);
				model.addAttribute(message, MessageUtils.ADD_SUCCESS);
				return messageurl;
			} catch (Exception e) {
				logger.error(e.getMessage(), e);
			}
			model.addAttribute(message, MessageUtils.ADD_FAIL);
			return messageurl;
		} else {// 修改
			try {
				formula.setId(formula.getId());
				formulaService.updateFormula(formula);
				model.addAttribute(message, MessageUtils.ADD_SUCCESS);
				return messageurl;
			} catch (Exception e) {
				logger.error(e.getMessage(), e);
			}
			model.addAttribute(message, MessageUtils.ADD_FAIL);
			return messageurl;
		}

	}

	/**
	 * 进入修改页面,APP端可以调用 lookjson 获取json格式数据
	 */
	@RequestMapping(value = "/update/pre")
	public String updatepre(Model model, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		ReturnDatas returnObject = lookjson(model, request, response);
		model.addAttribute(GlobalStatic.returnDatas, returnObject);
		return "/erp/gz/formula/formulaCru";
	}

	/**
	 * 删除操作
	 */
	@RequestMapping(value = "/delete")
	@ResponseBody
	public ReturnDatas delete(HttpServletRequest request) throws Exception {

		// 执行删除
		try {
			java.lang.String id = request.getParameter("id");
			if (StringUtils.isNotBlank(id)) {
				formulaService.deleteById(id, Formula.class);
				return new ReturnDatas(ReturnDatas.SUCCESS,
						MessageUtils.DELETE_SUCCESS);
			} else {
				return new ReturnDatas(ReturnDatas.WARNING,
						MessageUtils.DELETE_WARNING);
			}
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return new ReturnDatas(ReturnDatas.WARNING, MessageUtils.DELETE_WARNING);
	}

	/**
	 * 删除多条记录
	 * 
	 */
	@RequestMapping("/delete/more")
	@ResponseBody
	public ReturnDatas deleteMore(HttpServletRequest request, Model model) {
		String records = request.getParameter("records");
		if (StringUtils.isBlank(records)) {
			return new ReturnDatas(ReturnDatas.ERROR,
					MessageUtils.DELETE_ALL_FAIL);
		}
		String[] rs = records.split(",");
		if (rs == null || rs.length < 1) {
			return new ReturnDatas(ReturnDatas.ERROR,
					MessageUtils.DELETE_NULL_FAIL);
		}
		try {
			List<String> ids = Arrays.asList(rs);
			formulaService.deleteByIds(ids, Formula.class);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			return new ReturnDatas(ReturnDatas.ERROR,
					MessageUtils.DELETE_ALL_FAIL);
		}
		return new ReturnDatas(ReturnDatas.SUCCESS,
				MessageUtils.DELETE_ALL_SUCCESS);

	}

}
