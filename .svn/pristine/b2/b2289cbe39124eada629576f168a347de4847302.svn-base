package  org.springrain.erp.tc.web;

import java.io.File;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springrain.erp.constants.DicdataTypeEnum;
import org.springrain.erp.constants.ErpStateEnum;
import org.springrain.erp.constants.TcshowEnum;
import org.springrain.erp.tc.dto.DkdjRecordDto;
import org.springrain.erp.tc.entity.TongchouRecord;
import org.springrain.erp.tc.entity.TongchouShow;
import org.springrain.erp.tc.entity.TongchouZengjian;
import org.springrain.erp.tc.service.DkdjRecordService;
import org.springrain.erp.tc.service.ITongchouRecordService;
import org.springrain.erp.tc.service.ITongchouShowService;
import org.springrain.erp.tc.service.ITongchouZengjianService;
import org.springrain.frame.controller.BaseController;
import org.springrain.frame.util.DateUtils;
import org.springrain.frame.util.GlobalStatic;
import org.springrain.frame.util.Page;
import org.springrain.frame.util.ReturnDatas;
import org.springrain.frame.util.property.MessageUtils;
import org.springrain.system.entity.User;
import org.springrain.system.service.IUserService;


/**
 * TODO 在此加入类描述
 * @copyright {@link weicms.net}
 * @author springrain<Auto generate>
 * @version  2017-07-03 17:42:56
 * @see org.springrain.erp.tc.web.TongchouZengjian
 */
@Controller
@RequestMapping(value="/dkdj")
public class DkdjRecordController  extends BaseController {
	@Resource
	private ITongchouZengjianService tongchouZengjianService;
	@Resource
	private IUserService userService;
	@Resource
	private ITongchouShowService tongchouShowService;
	@Resource
	private ITongchouRecordService tongchouRecordService;
	@Resource
	private DkdjRecordService dkdjRecordService;
	private String listurl="/erp/tc/record/tcdkdjRecoedList";
	
		
	   
	/**
	 * 列表数据,调用listjson方法,保证和app端数据统一
	 * 
	 * @param request
	 * @param model
	 * @param tongchouZengjian
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/tclist")
	public String list(HttpServletRequest request, Model model,TongchouRecord tongchouRecord) 
			throws Exception {
		ReturnDatas returnObject = listjson(request, model, tongchouRecord);
		User user = new User();
		user.setUserType(ErpStateEnum.userTypeEnum.员工.getValue());
		List<User> listUser = userService.finderUserForList(user);
		model.addAttribute("listUser", listUser);
		model.addAttribute(GlobalStatic.returnDatas, returnObject);
		return listurl;
	}
	
	/**
	 * json数据,为APP提供数据
	 * 
	 * @param request
	 * @param model
	 * @param tongchouZengjian
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/tclist/json")
	@ResponseBody   
	public  ReturnDatas listjson(HttpServletRequest request, Model model,TongchouRecord tongchouRecord) throws Exception{
		ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
		// ==构造分页请求
		Page page = newPage(request);
		// ==执行分页查询
		try {
			if(StringUtils.isEmpty(tongchouRecord.getMonthStr())){
				Date date = new Date();
				tongchouRecord.setMonthStr(DateUtils.convertDate2String("yyyy-MM", date));
			}
			TongchouShow show = new TongchouShow();
			show.setDicttypeId(DicdataTypeEnum.统筹类型.getValue());
			show.setType(TcshowEnum.tcDeskShowEnum.工资代扣代缴报表.getValue());
			List<TongchouShow> listshow = tongchouShowService.findListByTypekey(show);
			returnObject.setPage(page);
			tongchouRecord.setListShow(listshow);
			returnObject.setQueryBean(tongchouRecord);
			List<DkdjRecordDto> list = tongchouRecordService.finderTcDkdjList(tongchouRecord, page);
			returnObject.setQueryBean(tongchouRecord);
			returnObject.setPage(page);
			returnObject.setData(list);
		} catch (Exception e) {
			
		}
		return returnObject;
	}
	
	@RequestMapping("/tclist/export")
	public void listexport(HttpServletRequest request,HttpServletResponse response, Model model,TongchouRecord tongchouRecord) throws Exception{
		// ==构造分页请求
		Page page = newPage(request);
		TongchouShow show = new TongchouShow();
		show.setDicttypeId(DicdataTypeEnum.统筹类型.getValue());
		show.setType(TcshowEnum.tcDeskShowEnum.工资代扣代缴报表.getValue());
		List<TongchouShow> listshow = tongchouShowService.findListByTypekey(show);
		tongchouRecord.setListShow(listshow);
		File file = tongchouRecordService.findDataExportExcel(null,"/erp/tc/record/tcdkdjRecoedList", page,TongchouRecord.class,tongchouRecord);
		String typeName = TcshowEnum.tcDeskShowEnum.工资代扣代缴报表.getName();
		String fileName="员工"+typeName+"记录"+GlobalStatic.excelext;
		downFile(response, file, fileName,true);
		return;
	}
	

	/**
	 * 列表数据,调用listjson方法,保证和app端数据统一
	 * 
	 * @param request
	 * @param model
	 * @param tongchouZengjian
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/gjjlist")
	public String gjjlist(HttpServletRequest request, Model model,TongchouRecord tongchouRecord) 
			throws Exception {
		ReturnDatas returnObject = gjjlistjson(request, model, tongchouRecord);
		User user = new User();
		user.setUserType(ErpStateEnum.userTypeEnum.员工.getValue());
		List<User> listUser = userService.finderUserForList(user);
		model.addAttribute("listUser", listUser);
		model.addAttribute(GlobalStatic.returnDatas, returnObject);
		return "/erp/tc/record/gjjdkdjRecoedList";
	}
	
	/**
	 * json数据,为APP提供数据
	 * 
	 * @param request
	 * @param model
	 * @param tongchouZengjian
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/gjjlist/json")
	@ResponseBody   
	public  ReturnDatas gjjlistjson(HttpServletRequest request, Model model,TongchouRecord tongchouRecord) throws Exception{
		ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
		// ==构造分页请求
		Page page = newPage(request);
		// ==执行分页查询
		try {
			if(StringUtils.isEmpty(tongchouRecord.getMonthStr())){
				Date date = new Date();
				tongchouRecord.setMonthStr(DateUtils.convertDate2String("yyyy-MM", date));
			}
			TongchouShow show = new TongchouShow();
			show.setDicttypeId(DicdataTypeEnum.统筹类型.getValue());
			show.setType(TcshowEnum.tcDeskShowEnum.社保公积金缴纳报表.getValue());
			List<TongchouShow> listshow = tongchouShowService.findListByTypekey(show);
			returnObject.setPage(page);
			tongchouRecord.setListShow(listshow);
			returnObject.setQueryBean(tongchouRecord);
			List<DkdjRecordDto> list = dkdjRecordService.finderGjjDkdjList(tongchouRecord, page);
			returnObject.setQueryBean(tongchouRecord);
			returnObject.setPage(page);
			returnObject.setData(list);
		} catch (Exception e) {
			
		}
		return returnObject;
	}
	
	@RequestMapping("/gjjlist/export")
	public void gjjlistexport(HttpServletRequest request,HttpServletResponse response, Model model,TongchouRecord tongchouRecord) throws Exception{
		// ==构造分页请求
		Page page = newPage(request);
		TongchouShow show = new TongchouShow();
		show.setDicttypeId(DicdataTypeEnum.统筹类型.getValue());
		show.setType(TcshowEnum.tcDeskShowEnum.社保公积金缴纳报表.getValue());
		List<TongchouShow> listshow = tongchouShowService.findListByTypekey(show);
		tongchouRecord.setListShow(listshow);
		File file = dkdjRecordService.findDataExportExcel(null,"/erp/tc/record/gjjdkdjRecoedList", page,TongchouRecord.class,tongchouRecord);
		String typeName = TcshowEnum.tcDeskShowEnum.社保公积金缴纳报表.getName();
		String fileName="员工"+typeName+"记录"+GlobalStatic.excelext;
		downFile(response, file, fileName,true);
		return;
	}
	
	
	/**
	 * 删除操作
	 */
	@RequestMapping(value="/delete")
	@ResponseBody      
	public  ReturnDatas delete(HttpServletRequest request) throws Exception {

			// 执行删除
		try {
		java.lang.String id=request.getParameter("id");
		if(StringUtils.isNotBlank(id)){
				tongchouZengjianService.deletetongchouInfo(id);
				return new ReturnDatas(ReturnDatas.SUCCESS,MessageUtils.DELETE_SUCCESS);
			} else {
				return new ReturnDatas(ReturnDatas.WARNING,MessageUtils.DELETE_WARNING);
			}
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return new ReturnDatas(ReturnDatas.WARNING, MessageUtils.DELETE_WARNING);
	}
	
	/**
	 * 删除多条记录
	 * 
	 */
	@RequestMapping("/delete/more")
	@ResponseBody      
	public ReturnDatas deleteMore(HttpServletRequest request, Model model) {
		String records = request.getParameter("records");
		if(StringUtils.isBlank(records)){
			 return new ReturnDatas(ReturnDatas.ERROR,MessageUtils.DELETE_ALL_FAIL);
		}
		String[] rs = records.split(",");
		if (rs == null || rs.length < 1) {
			return new ReturnDatas(ReturnDatas.ERROR,MessageUtils.DELETE_NULL_FAIL);
		}
		try {
			List<String> ids = Arrays.asList(rs);
			tongchouZengjianService.deleteByIds(ids,TongchouZengjian.class);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			return new ReturnDatas(ReturnDatas.ERROR,MessageUtils.DELETE_ALL_FAIL);
		}
		return new ReturnDatas(ReturnDatas.SUCCESS,MessageUtils.DELETE_ALL_SUCCESS);
		
		
	}

	
}
